@using isport_foxhun.commom
@using isport_foxhun.Models
@model isport_foxhun.Models.PlayerViewModel

<h2>Player</h2>

<script type="text/javascript">

    $(document).ready(function () {
        $("#player_region").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/Player/Province",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        console.log(data);
                        response($.map(data, function (item) {
                            return { label: item.pvnName, value: item.pvnName };
                        }))

                    }
                })
            },
            messages: {
                noResults: '',
                results: function (resultsCount) { }
            }
        });


    });

    function CallChangefunc(e) {
        //console.log(e);
        if (e != "-select-") {
            $.ajax({
                type: "GET",
                url: "/Player/Parameter",
                data: { position: e  }
            }).done(function (htmlResponse) {
                console.log(htmlResponse);
                $("#divParameter").html(htmlResponse)
            });
        }
    }

    function ValidateNumber(e) {
        var evt = (e) ? e : window.event;
        var charCode = (evt.keyCode) ? evt.keyCode : evt.which;
        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        return true;
    };

    /*
    $(document).on('input', '#rTacking', function () {
        $('#rTacking_value').html($(this).val());
        //console.log($(this).val());
        $('#player_tacking').val($(this).val());
    });

    */


</script>

<script>console.log("sdfsdfdf");</script>
@if (TempData["AddPlayer_Message"] != null)
{
    
    <script>alert("@TempData["AddPlayer_Message"]");</script>
    var str = @TempData.Remove("AddPlayer_Message");
}

@using (Html.BeginForm("AddPlayer", "Player", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <hr />
    <div class="col-md-12">
        <h2>Info</h2>
        <hr />
        <div class="col-md-2">
            @Html.HiddenFor(m => m.player.id)
            @{ if (Model.player.image != null)
                {
                    <img src="@Url.Content(Model.player.image)" class="img-thumbnail" style="max-height:150px;" />
                    @Html.HiddenFor(m => m.player.image)
                }
                else
                {
                    <img src="~/images/isport.png" class="img-thumbnail" style="max-height:150px;" />
                }
            }
            <div class="form-group">
                <input type="file" name="image" id="image" />
            </div>
        </div>
        <div class="col-md-10 left">
            <div class="form-group">
                <div class="col-md-2 control-label">
                    Province Name :
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(m => m.player.region, new { @class = "form-control", required = "required" })
                </div>
                <div class="col-md-2 control-label">
                    Team Name :
                </div>
                <div class="col-md-4">

                    @Html.TextBoxFor(m => m.player.team, new { @class = "form-control", required = "required" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-2 control-label">
                    Name TH :
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(m => m.player.name, new { @class = "form-control", required = "required" })
                </div>
                <div class="col-md-2 control-label">
                    Name EN :
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(m => m.player.nameen, new { @class = "form-control", required = "required" })
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-2 control-label">
                    Position :
                </div>
                <div class="col-md-2">
                    @Html.DropDownListFor(model => model.player.position, new SelectList(new string[] { "GK", "CB", "LB", "FB", "LWB", "RWB", "DM", "CM", "AM", "LW", "RW", "CF", "WF", "ST" }), "-Selected-", new { @class = "form-control", @onchange = "CallChangefunc(this.value)", required = "required" })
                </div>
                <div class="col-md-1 control-label">
                    Shirt :
                </div>
                <div class="col-md-1">
                    @Html.DropDownListFor(model => model.player.size, new SelectList(new string[] { "S", "M", "L", "XL", "XXL" }), "-select-", new { @class = "form-control", required = "required" })
                </div>
                <div class="col-md-1 control-label">
                    pants :
                </div>
                <div class="col-md-1">
                    @Html.DropDownListFor(model => model.player.sizepants, new SelectList(new string[] { "S", "M", "L", "XL", "XXL" }), "-select-", new { @class = "form-control", required = "required" })
                </div>
                <div class="col-md-2 control-label">
                    No. :
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(m => m.player.seq, new { onkeydown = "return ValidateNumber(event);", @class = "form-control", required = "required" })
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-2 control-label">
                    Age :
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(m => m.player.age, new { onkeydown = "return ValidateNumber(event);", @class = "form-control", required = "required" })
                </div>
                <div class="col-md-2 control-label">
                    height :
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(m => m.player.hight, new { onkeydown = "return ValidateNumber(event);", @class = "form-control", required = "required" })
                </div>
                <div class="col-md-2 control-label">
                    weight :
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(m => m.player.wight, new { onkeydown = "return ValidateNumber(event);", @class = "form-control", required = "required" })
                </div>
            </div>
@if (AppUtils.Session.User.role == AppCodeModel.USERROLE.ADMIN.ToString())
{
            <div class="form-group">
                <div class="col-md-2 control-label">
                    HT :
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(m => m.player.HT, new { onkeydown = "return ValidateNumber(event);", @class = "form-control" })
                </div>
                <div class="col-md-2 control-label">
                    FT :
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(m => m.player.FT, new { onkeydown = "return ValidateNumber(event);", @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-2 control-label">
                    จำนวนนัดที่ลงเล่น :
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(m => m.player.competition, new { onkeydown = "return ValidateNumber(event);", @class = "form-control" })
                </div>
                <div class="col-md-2 control-label">
                    ประตูที่ทำได้ :
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(m => m.player.score, new { onkeydown = "return ValidateNumber(event);", @class = "form-control" })
                </div>
                <div class="col-md-2 control-label">
                    จำนวนครั้งที่ได้เห็น :
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(m => m.player.see, new { onkeydown = "return ValidateNumber(event);", @class = "form-control" })
                </div>
            </div>
}

            <div class="form-group">
                <div class="col-md-2 control-label">
                    Detail :
                </div>
                <div class="col-md-10">
                    @Html.TextAreaFor(m => m.player.detail, new { @class = "form-control", @style = "width :100%; " })
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-12">

        <!--div id="divParameter"></!_-div> -->
        @if (AppUtils.Session.User.role == AppCodeModel.USERROLE.ADMIN.ToString())
        {
            @Html.Action("Parameter1", "Player", Model);
        }

    </div>
            

    <div class="form-group">
        <div class="col-md-12">
            <input type="submit" class="btn btn-primary center-block" value="Submit" />
        </div>
    </div>
 }

@if (AppUtils.Session.User.role == AppCodeModel.USERROLE.ADMIN.ToString())
{
    <div class="row">
        <div class="col-md-12">
            <h2>History</h2>
            <hr />
            @Html.Action("History", "Player", new { player_id = @Model.player.id })
        </div>
    </div>
}
<div id="divDetail" class="col-lg-12">

</div>



<!--
<div class="form-group">
    <div class="col-md-2 control-label">
        Tacking: Html.TextBoxFor(m => m.player.tacking, new { style = "border:none;width:10px;", value = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rTacking" value="Model.player.tacking" min="0" max="10" step="1" />

    </div>

    <div class="col-md-2 control-label">
        Marking: Html.TextBoxFor(m => m.player.marking, new { style = "border:none;width:10px;", value = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rMarking" value="Model.player.marking" min="0" max="10" step="1" />
    </div>
</div>

<div class="form-group">
    <div class="col-md-2 control-label">
        Positioning: Html.TextBoxFor(m => m.player.positioning, new { style = "border:none;width:10px;", value = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rPositioning" value="Model.player.positioning" min="0" max="10" step="1" />
    </div>
    <div class="col-md-2 control-label">
        Heading: Html.TextBoxFor(m => m.player.heading, new { style = "border:none;width:10px;", value = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rHeading" value="Model.player.heading" min="0" max="10" step="1" />
    </div>
</div>

<div class="form-group">
    <div class="col-md-2 control-label">
        Passing: Html.TextBoxFor(m => m.player.passing, new { style = "border:none;width:10px;", value = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rPassing" value="Model.player.passing" min="0" max="10" step="1" />
    </div>
    <div class="col-md-2 control-label">
        Dribbling: Html.TextBoxFor(m => m.player.dribbling, new { style = "border:none;width:10px;", value = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rDribbling" value="Model.player.dribbling" min="0" max="10" step="1" />
    </div>
</div>

<div class="form-group">
    <div class="col-md-2 control-label">
        Crossing: Html.TextBoxFor(m => m.player.crossing, new { style = "border:none;width:10px;", value = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rCrossing" value="Model.player.crossing" min="0" max="10" step="1" />
    </div>
    <div class="col-md-2 control-label">
        Shooting: Html.TextBoxFor(m => m.player.shooting, new { style = "border:none;width:10px;", value = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rShooting" value="Model.player.shooting" min="0" max="10" step="1" />
    </div>
</div>

<div class="form-group">
    <div class="col-md-2 control-label">
        Finish: Html.TextBoxFor(m => m.player.finish, new { style = "border:none;width:10px;", value = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rFinish" value="Model.player.finish" min="0" max="10" step="1" />
    </div>
    <div class="col-md-2 control-label">
        Strength: Html.TextBoxFor(m => m.player.strength, new { style = "border:none;width:10px;", alue = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rStrength" value="Model.player.strength" min="0" max="10" step="1" />
    </div>
</div>

<div class="form-group">
    <div class="col-md-2 control-label">
        Speed: Html.TextBoxFor(m => m.player.speed, new { style = "border:none;width:10px;", value = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rSpeed" value="Model.player.speed" min="0" max="10" step="1" />
    </div>
    <div class="col-md-2 control-label">
        Creativity: Html.TextBoxFor(m => m.player.creativity, new { style = "border:none;width:10px;", value = "1" })
    </div>
    <div class="col-md-4">
        <input type="range" id="rCreativity" value="Model.player.creativity" min="0" max="10" step="1" />
    </div>
</div>
    -->
